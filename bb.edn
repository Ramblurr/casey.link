{:paths []
 :deps  {io.aviso/pretty {:mvn/version "1.4.4"}}
 :tasks {:requires      ([clojure.string :as str]
                         [io.aviso.ansi :as ansi]
                         [babashka.tasks :refer [shell]])
         :init          (do
                          (def lib (first *command-line-args*))
                          (defn classpath-test-dev []
                            (-> (shell {:out :string} "clj" "-A:test:dev" "-Spath") :out str/trim))
                          (defn clj [& args]
                            (println (str
                                      ansi/bold-font "+ clojure " (str/join " " args)
                                      ansi/reset-font))
                            (apply clojure args))
                          (defn shell+ [& args]
                            (println (str
                                      ansi/bold-font "+ " (str/join " " args)
                                      ansi/reset-font))
                            (apply shell args)))
         sync-clj-kondo (do
                          (let [cp (classpath-test-dev)]
                            (shell+ (str "clj-kondo --lint " cp " --copy-configs --skip-lint"))
                            (shell+ (str "clj-kondo --lint " cp "  --dependencies --parallel"))))

         css       (shell "tailwindcss --minify -i ./src/site/input.css -o ./src/public/site.css")
         watch-css (shell "tailwindcss -i ./src/site/input.css -o ./src/public/site.css --watch")
         repl      {:override-builtin true
                    :doc              "Run the dev REPL"
                    :task             (shell "clojure -M:repl/cider:dev")}
         fmt       (shell "cljfmt check")
         fmt:fix   (shell "cljfmt fix .")
         lint      (shell+ (str "clj-kondo" " --fail-level error"
                                (if (seq *command-line-args*)
                                  (str " --lint " (first *command-line-args*))
                                  " --lint src --lint test")))
         deps-tree (shell+ "clj -X:deps tree :aliases '[:dev]'")
         test      {:doc  "Run JVM Clojure tests with kaocha"
                    :task (apply clojure {:extra-env {"TEST_SCI" "true"}}
                                 "-M:test" "-m" "kaocha.runner" *command-line-args*)}

         uberjar   {:doc              "Build deployment artifact"
                    :depends          [css]
                    :task             (clojure "-T:build uber")
                    :override-builtin true}
         clean     (clojure "-T:build clean")
         deps-lock (shell "nix run github:jlesquembre/clj-nix#deps-lock -- --alias-exclude test --alias-exclude dev")
         ci        {:doc     "Run all CI time verification tasks"
                    :depends [fmt sync-clj-kondo lint test]}}}
